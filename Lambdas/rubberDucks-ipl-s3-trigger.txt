import json
import urllib.parse
import csv
import boto3
import uuid

print('Loading function')

s3 = boto3.client('s3')


def lambda_handler(event, context):
    #print("Received event: " + json.dumps(event, indent=2))
    dynamodb = boto3.client('dynamodb')
    # Get the object from the event and show its content type
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
    sequenceItem = dynamodb.get_item(TableName='sequenceTable', Key={'sequence': {'N' :'123'}})
    sno = int(sequenceItem['Item']['sno']['N'])
    try:
        response = s3.get_object(Bucket=bucket, Key=key)
        print("CONTENT TYPE: " + response['ContentType'])
        bytes = response['Body'].read().decode("utf-8")
        rows = bytes.split("\n")
        rows = rows[1:20]
        put_query='{"sno":{"N":"' + str(sno) + '"},'
        i=0
        for row in rows:
            columns = row.split(",")
            columns = columns[1:3]
            j=0
            for col in columns:
                if(i == 7 and j == 1):
                    col = col.replace('"', '')
                    col = col.replace(',', ' ')
                    #print(col)
                    
                if (i < 2 or i==13):
                    if(j < 1):
                        put_query+='"'+col + str(i) + '" : '  + '{"S":"'
                        j=j+1
                    else:
                        put_query += col + '"},'
                else:
                    if(j < 1):
                        put_query+='"'+col + '" : '  + '{"S":"'
                        j=j+1
                    else:
                        put_query += col + '"},'
            i=i+1
            
        put_query = put_query[:-1]
        put_query += "}"
        document = json.loads(put_query)
        put_query=""
        
        dynamodb.put_item(TableName='iplTable', Item=document)
        what_to_print = dynamodb.get_item(TableName='iplTable', Key={'sno': {'N' : str(sno)}});
        
        sno=sno+1
        dynamodb.put_item(TableName='sequenceTable', Item={'sequence': {'N' :'123'}, 'sno': {'N': str(sno)}})
        what_to_print2 = dynamodb.get_item(TableName='sequenceTable', Key={'sequence': {'N' :'123'}})
        return what_to_print
        #return str(what_to_print) + " " + str(what_to_print2)
    except Exception as e:
        print(e)
        print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))
        raise e